/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void insert_tail(ListNode *&head,ListNode *&tail, int val)
    {
        ListNode *newnode = new ListNode(val);
        if(head==NULL)
        {
            head = newnode;
            tail = newnode;
            return;
        }
        tail->next = newnode;
        tail = tail->next;
       // newnode->next = NULL;
    }
    void reverse(ListNode *&head, ListNode *curr)
    {
        if(curr->next==NULL)
        {
            head = curr;
            return;
        }
        reverse(head,curr->next);
        curr->next->next = curr;
        curr->next = NULL;
    }
    void print_normal(ListNode *head)
    {
        ListNode *tmp = head;

        while(tmp!=NULL)
        {
            cout<<tmp->val<<" ";
            tmp = tmp->next;
        }
        cout<<endl;
    }
    bool isPalindrome(ListNode* head) {
            if(head == NULL) return true;
            ListNode *newhead = NULL;
            ListNode *newtail = NULL;
            ListNode *tmp = head;

            while(tmp!=NULL)
            {
                insert_tail(newhead,newtail,tmp->val);
                tmp = tmp->next;
            }
            reverse(newhead,newhead);
            print_normal(newhead);
            ListNode *tmp1 = head;
            ListNode *tmp2 = newhead;

            while(tmp1!=NULL)
            {
                if(tmp1->val!=tmp2->val)
                {
                    return false;
                }
                tmp1 = tmp1->next;
                tmp2 = tmp2->next;
            }
            return true;

        }
};
