class Solution {
public:
    int r,c;
    bool vis[100][100];
    int ans;
    vector<pair<int,int>> d = {{0,1},{1,0},{-1,0},{0,-1}};

    bool valid(int ci, int cj)
    {
        if (ci >= 0 && cj >= 0 && ci < r && cj < c) return true;
        return false;
    }
    void dfs(int si,int sj, vector<vector<int>>& grid)
    {
        vis[si][sj] = true;
        ans++;
        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;

            if(valid(ci,cj)==true && !vis[ci][cj] && grid[ci][cj]==1)
            {
                dfs(ci,cj,grid);
            }
        }
    }

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        r = grid.size();
        c = grid[0].size();
        memset(vis,false,sizeof(vis));
        int mx = 0;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(!vis[i][j] && grid[i][j]==1)
                {
                    ans=0;
                    dfs(i,j,grid);
                    mx =  max(ans,mx);
                }
            }
        }

        return mx;
        
    }
};
