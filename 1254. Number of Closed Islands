class Solution {
public:
    bool valid(int ci, int cj, int r, int c, vector<vector<int>>& grid)
    {
        if(ci < 0 || ci >= r || cj < 0 || cj >= c || grid[ci][cj] == 1)
        {
            return false;
        }
        return true;
    }
    
    void dfs(int si,int sj, int r, int c, vector<vector<int>>& grid)
    {
        grid[si][sj] = 1;

        vector<pair<int,int>> d = {{0,1},{0,-1},{-1,0},{1,0}};

        for(int i=0;i<4;i++)
        {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;

            if(valid(ci,cj,r,c,grid))
            {
                dfs(ci,cj,r,c,grid);
            }
        }
    }
    
    int closedIsland(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();

        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(i*j==0 || i==r-1 || j==c-1)
                {
                    if(grid[i][j]==0)
                    {
                        dfs(i,j,r,c,grid);
                    }
                }
            }
        }

        int cnt = 0;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==0)
                {
                    cnt++;
                    dfs(i,j,r,c,grid);
                }
            }
        }
        return cnt;
    }
};
